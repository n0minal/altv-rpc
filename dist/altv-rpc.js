'use strict';Object.defineProperty(exports,"__esModule",{value:!0}),require("reflect-metadata");var alt=require("alt");function _interopDefaultLegacy(a){return a&&"object"==typeof a&&"default"in a?a:{default:a}}var alt__default=_interopDefaultLegacy(alt);const glob=getGlobal(),setTimeout=alt__default["default"].setTimeout||glob.setTimeout;function uid(){const a=0|46656*Math.random(),b=0|46656*Math.random(),c=("000"+a.toString(36)).slice(-3),d=("000"+b.toString(36)).slice(-3);return c+d}function getEnvironment(){if(!alt__default["default"].Player)return"cef";return alt__default["default"].Player.local?"client":alt__default["default"].Player?"server":void 0}function stringifyData(a){const b=getEnvironment();return JSON.stringify(a,(a,c)=>("client"===b||"server"===b)&&c instanceof alt__default["default"].Entity?{__i:c.id}:c)}function parseData(a){const b=getEnvironment();try{return JSON.parse(a,(a,c)=>("client"===b||"server"===b)&&c&&"object"==typeof c&&"number"==typeof c.__i&&1===Object.keys(c).length?alt__default["default"].Entity.getByID(c.__i):c)}catch(b){log(`Failed to parse event arguments: ${b.message}`,!0),log(a,!0)}}function promiseTimeout(a,b){return"number"==typeof b?Promise.race([new Promise((a,c)=>{setTimeout(()=>c("TIMEOUT"),b)}),a]):a}function getGlobal(){if("undefined"!=typeof global)return global;return"undefined"==typeof window?void 0:window}function requestNamespace(a){const b="__rpc:namespaces",c=(a,b)=>{if(!a.includes(b))return a.push(b),!0};if(glob){const d=glob[b]||[];if(!c(d,a))return!1;glob[b]=d}else{const d=alt__default["default"].Player.local;if(d){const e=d.getMeta(b),f=e?JSON.parse(e):[];if(!c(f,a))return!1;d.setMeta(b,JSON.stringify(f))}}return!0}function log(a,b=!1){const c=getEnvironment();(b||!1)&&(alt__default["default"].log||console.log)(`RPC (${c}): ${a}`)}function chunk(a){return a.match(/.{1,10000}/g)}const environment=getEnvironment();if(!environment)throw"Unknown alt:V environment";const ERR_NOT_FOUND="PROCEDURE_NOT_FOUND",PROCESS_EVENT="__rpc:process",BROWSER_REGISTER="__rpc:browserRegister",TRIGGER_EVENT="__rpc:triggerEvent",TRIGGER_EVENT_BROWSERS="__rpc:triggerEventBrowsers";var EventType;(function(a){a[a.REQUEST=0]="REQUEST",a[a.RESPONSE_SUCCESS=1]="RESPONSE_SUCCESS",a[a.RESPONSE_ERROR=2]="RESPONSE_ERROR"})(EventType||(EventType={}));const rpcListeners={},rpcPending={},rpcIncoming={},rpcEvListeners={},rpcBrowsers=[],rpcBrowserProcedures={},registeredProcedures=new Map;let rpcNamespace="";function init(a){if(rpcNamespace)throw"Already initialized.";if(!a)throw"Must specify a namespace.";if(!requestNamespace(a))throw`Namespace "${a}" is already in use.`;log(`Initialized with namespace "${a}"`),rpcNamespace=a;const b=getEventName(PROCESS_EVENT),c=getEventName(TRIGGER_EVENT);alt__default["default"].on(b,processEvent),"server"===environment&&alt__default["default"].onClient(b,(a,b)=>processEvent(b,a)),"client"===environment&&(alt__default["default"].onServer(b,processEvent),register("__rpc:callServer",([a,b,c],d)=>_callServer(a,b,{fenv:d.environment,noRet:c})),register("__rpc:callBrowsers",([a,b,c],d)=>_callBrowsers(null,a,b,{fenv:d.environment,noRet:c})),register(getEventName(TRIGGER_EVENT_BROWSERS),([a,b],d)=>{rpcBrowsers.forEach(e=>{_callBrowser(e,c,[a,b],{fenv:d.environment,noRet:1})})})),register(c,([a,b],c)=>callEvent(a,b,c))}function getEventName(a){return`${a}::${rpcNamespace}`}function requireNamespace(){if(!rpcNamespace)throw new Error(`You must first call rpc.init() with a namespace.`)}function processEvent(a,b,c){log(`Processing Event: ${a.id} (${a.part}/${a.total})${b?" from player":""}${c?" from cef":""}`);const d=rpcIncoming[a.id]||{recv:0,total:a.total};if("undefined"!=typeof a.args&&(!d.args&&(d.args=""),d.args+=a.args),d.recv++,rpcIncoming[a.id]=d,d.recv<d.total)return;delete rpcIncoming[a.id],log(`Stringified Args: ${d.args}`);const e="undefined"==typeof d.args?void 0:parseData(d.args),f=getEventName(PROCESS_EVENT);if(a.type===EventType.REQUEST){const d={id:a.id,environment:a.fenv||a.env,player:b};let g,h=!0;switch(environment){case"server":g=a=>alt__default["default"].emitClient(b,f,a);break;case"client":{"server"===a.env?g=a=>alt__default["default"].emitServer(f,a):"cef"===a.env&&(d.browser=c,g=a=>c&&c.valid&&c.emit(f,a));break}case"cef":g=a=>alt__default["default"].emit(PROCESS_EVENT,a),h=!1;}if(g){const b=callProcedure(a.name,e,d);if(!a.noRet){let c,d=EventType.RESPONSE_SUCCESS;b.then(a=>{c=a}).catch(a=>{d=EventType.RESPONSE_ERROR,c=a}).finally(()=>{sendEvent({type:d,id:a.id,env:environment},c,g,h)})}}}else{const c=rpcPending[a.id];if("server"===environment&&c.player!==b)return;c&&(c.resolve(a.type===EventType.RESPONSE_SUCCESS?e:Promise.reject(e)),delete rpcPending[a.id])}}async function callProcedure(a,b,c){const d=rpcListeners[a];if(!d)throw`${ERR_NOT_FOUND} (${a})`;return d(b,c)}function sendEvent(a,b,c,d=!0){const e=(b,d,e)=>c({...a,part:b,total:d,args:e});if("undefined"!=typeof b){const a=stringifyData(b),c=d?chunk(a):[a];c.forEach((a,b)=>{e(b+1,c.length,a)})}else e(1,1)}function addWebView(a){if(requireNamespace(),"client"!==environment)throw"addWebView can only be used on the client";rpcBrowsers.includes(a)||(a.on(PROCESS_EVENT,b=>processEvent(b,void 0,a)),a.on(BROWSER_REGISTER,b=>{rpcBrowserProcedures[b]=a}),rpcBrowsers.push(a))}function register(a,b){if(2!==arguments.length)throw"register expects 2 arguments: \"name\" and \"cb\"";log(`Registered procedure "${a}"`),"cef"===environment&&alt__default["default"].emit(BROWSER_REGISTER,a),rpcListeners[a]=b}function unregister(a){if(1!==arguments.length)throw"unregister expects 1 argument: \"name\"";rpcListeners[a]=void 0}function call(a,b,c={}){return 1>arguments.length||3<arguments.length?Promise.reject("call expects 1 to 3 arguments: \"name\", optional \"args\", and optional \"options\""):promiseTimeout(callProcedure(a,b,{environment}),c.timeout)}function _callServer(a,b,c={}){switch(requireNamespace(),environment){case"server":return call(a,b);case"client":{const d=uid();return new Promise(e=>{c.noRet||(rpcPending[d]={resolve:e}),sendEvent({type:EventType.REQUEST,id:d,name:a,env:environment,...c},b,a=>alt__default["default"].emitServer(getEventName(PROCESS_EVENT),a))})}case"cef":return callClient("__rpc:callServer",[a,b,+c.noRet]);}}function callServer(a,b,c={}){if(requireNamespace(),1>arguments.length||3<arguments.length)return Promise.reject("callServer expects 1 to 3 arguments: \"name\", optional \"args\", and optional \"options\"");let d={};return c.noRet&&(d.noRet=1),promiseTimeout(_callServer(a,b,d),c.timeout)}function _callClient(a,b,c,d={}){switch(requireNamespace(),environment){case"client":return call(b,c);case"server":{const e=uid();return new Promise(f=>{d.noRet||(rpcPending[e]={resolve:f,player:a}),sendEvent({type:EventType.REQUEST,id:e,name:b,env:environment,...d},c,b=>alt__default["default"].emitClient(a,getEventName(PROCESS_EVENT),b))})}case"cef":{const a=uid();return new Promise(e=>{d.noRet||(rpcPending[a]={resolve:e}),sendEvent({type:EventType.REQUEST,id:a,name:b,env:environment,...d},c,a=>alt__default["default"].emit(PROCESS_EVENT,a),!1)})}}}function callClient(a,b,c,d={}){switch(requireNamespace(),environment){case"client":{if(d=c||{},c=b,b=a,a=null,1>arguments.length||3<arguments.length||"string"!=typeof b)return Promise.reject("callClient from the client expects 1 to 3 arguments: \"name\", optional \"args\", and optional \"options\"");break}case"server":{if(2>arguments.length||4<arguments.length||"object"!=typeof a)return Promise.reject("callClient from the server expects 2 to 4 arguments: \"player\", \"name\", optional \"args\", and optional \"options\"");break}case"cef":{if(d=c||{},c=b,b=a,a=null,1>arguments.length||3<arguments.length||"string"!=typeof b)return Promise.reject("callClient from the browser expects 1 to 3 arguments: \"name\", optional \"args\", and optional \"options\"");break}}let e={};return d.noRet&&(e.noRet=1),promiseTimeout(_callClient(a,b,c,e),d.timeout)}function _callBrowser(a,b,c,d={}){return a&&a.valid?(requireNamespace(),new Promise(e=>{const f=uid();d.noRet||(rpcPending[f]={resolve:e}),sendEvent({type:EventType.REQUEST,id:f,name:b,env:environment,...d},c,b=>a.emit(getEventName(PROCESS_EVENT),b),!1)})):Promise.reject("INVALID_BROWSER")}function _callBrowsers(a,b,c,d={}){switch(requireNamespace(),environment){case"client":const e=rpcBrowserProcedures[b];return e&&e.valid?_callBrowser(e,b,c,d):Promise.reject(`${ERR_NOT_FOUND} (${b})`);case"server":return _callClient(a,"__rpc:callBrowsers",[b,c,+d.noRet],d);case"cef":return _callClient(null,"__rpc:callBrowsers",[b,c,+d.noRet],d);}}function callBrowsers(a,b,c,d={}){requireNamespace();let e,f={};switch(environment){case"client":case"cef":if(d=c||{},c=b,b=a,1>arguments.length||3<arguments.length)return Promise.reject("callBrowsers from the client or browser expects 1 to 3 arguments: \"name\", optional \"args\", and optional \"options\"");d.noRet&&(f.noRet=1),e=_callBrowsers(null,b,c,f);break;case"server":if(2>arguments.length||4<arguments.length)return Promise.reject("callBrowsers from the server expects 2 to 4 arguments: \"player\", \"name\", optional \"args\", and optional \"options\"");d.noRet&&(f.noRet=1),e=_callBrowsers(a,b,c,f);}if(e)return promiseTimeout(e,d.timeout)}function callBrowser(a,b,c,d={}){if("client"!==environment)return Promise.reject("callBrowser can only be used in the client environment");if(2>arguments.length||4<arguments.length)return Promise.reject("callBrowser expects 2 to 4 arguments: \"browser\", \"name\", optional \"args\", and optional \"options\"");requireNamespace();let e={};return d.noRet&&(e.noRet=1),promiseTimeout(_callBrowser(a,b,c,e),d.timeout)}function callEvent(a,b,c){const d=rpcEvListeners[a];d&&d.forEach(a=>a(b,c))}function on(a,b){if(2!==arguments.length)throw"on expects 2 arguments: \"name\" and \"cb\"";const c=rpcEvListeners[a]||new Set;c.add(b),rpcEvListeners[a]=c}function off(a,b){if(2!==arguments.length)throw"off expects 2 arguments: \"name\" and \"cb\"";const c=rpcEvListeners[a];c&&c.delete(b)}function trigger(a,b){if(1>arguments.length||2<arguments.length)throw"trigger expects 1 or 2 arguments: \"name\", and optional \"args\"";callEvent(a,b,{environment})}function triggerClient(a,b,c){switch(requireNamespace(),environment){case"client":{if(c=b,b=a,a=null,1>arguments.length||2<arguments.length||"string"!=typeof b)throw"triggerClient from the client expects 1 or 2 arguments: \"name\", and optional \"args\"";break}case"server":{if(2>arguments.length||3<arguments.length||"object"!=typeof a)throw"triggerClient from the server expects 2 or 3 arguments: \"player\", \"name\", and optional \"args\"";break}case"cef":{if(c=b,b=a,a=null,1>arguments.length||2<arguments.length||"string"!=typeof b)throw"triggerClient from the browser expects 1 or 2 arguments: \"name\", and optional \"args\"";break}}_callClient(a,getEventName(TRIGGER_EVENT),[b,c],{noRet:1})}function triggerServer(a,b){if(1>arguments.length||2<arguments.length)throw"triggerServer expects 1 or 2 arguments: \"name\", and optional \"args\"";requireNamespace(),_callServer(getEventName(TRIGGER_EVENT),[a,b],{noRet:1})}function triggerBrowsers(a,b,c){switch(environment){case"client":case"cef":if(c=b,b=a,a=null,1>arguments.length||2<arguments.length)throw"triggerBrowsers from the client or browser expects 1 or 2 arguments: \"name\", and optional \"args\"";break;case"server":if(2>arguments.length||3<arguments.length)throw"triggerBrowsers from the server expects 2 or 3 arguments: \"player\", \"name\", and optional \"args\"";}requireNamespace(),_callClient(a,getEventName(TRIGGER_EVENT_BROWSERS),[b,c],{noRet:1})}function triggerBrowser(a,b,c){if("client"!==environment)throw"callBrowser can only be used in the client environment";if(2>arguments.length||4<arguments.length)throw"callBrowser expects 2 or 3 arguments: \"browser\", \"name\", and optional \"args\"";requireNamespace(),_callBrowser(a,getEventName(TRIGGER_EVENT),[b,c],{noRet:1})}const procedurable=()=>function(a){return class extends a{constructor(...b){if(super(...b),!Reflect.getMetadata("design:procedurelist:init",a.prototype)){const b=Reflect.getMetadata("design:procedurelist",a.prototype)||[];b.forEach((a,b)=>{a=a.map(a=>{const{procedure:c,callable:d}=a,e=this[d].bind(this);if("function"!=typeof this[d])throw new Error(`Event[${b}] in ${this.constructor.name} is not callable!`);return c.forEach(a=>register(a,e)),a.func=e,a});const c=registeredProcedures.get(b)||[];registeredProcedures.set(b,[...c,...a])}),Reflect.defineMetadata("design:procedurelist:init",!0,a.prototype)}}}},procedure=a=>{a=Array.isArray(a)?a:[a];const b=a.filter((b,c)=>a.indexOf(b)===c),c={procedure:b,callable:""},d=b[0];return function(a,b,e){if(!(e.value instanceof Function))throw new Error(`Procedure[${d}] must be callable`);const f=Reflect.getMetadata("design:procedurelist",a)||new Map;c.callable=b.toString();const g=f.get(d);return f.set(d,g&&[...g,c]||[c]),Reflect.defineMetadata("design:procedurelist",f,a),e}};var index={init,addWebView,register,unregister,call,callServer,callClient,callBrowsers,callBrowser,on,off,trigger,triggerServer,triggerClient,triggerBrowsers,triggerBrowser,procedurable,procedure};exports.addWebView=addWebView,exports.call=call,exports.callBrowser=callBrowser,exports.callBrowsers=callBrowsers,exports.callClient=callClient,exports.callServer=callServer,exports.default=index,exports.init=init,exports.off=off,exports.on=on,exports.procedurable=procedurable,exports.procedure=procedure,exports.register=register,exports.trigger=trigger,exports.triggerBrowser=triggerBrowser,exports.triggerBrowsers=triggerBrowsers,exports.triggerClient=triggerClient,exports.triggerServer=triggerServer,exports.unregister=unregister;
